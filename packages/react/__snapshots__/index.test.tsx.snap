// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mount should mount the react component 1`] = `
<Component
  actions={Object {}}
  block={
    Object {
      "theme": Object {
        "dangerColor": "#4b0082",
        "infoColor": "#00ff00",
        "linkColor": "#ff7f00",
        "primaryColor": "#ff0000",
        "splashColor": "#8b00ff",
        "successColor": "#ffff00",
        "themeColor": "#ffffff",
        "tileLayer": "https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
        "warningColor": "#0000ff",
      },
      "type": "test",
      "version": "0.0.0",
    }
  }
  data={Object {}}
  events={
    Object {
      "emit": [Function],
      "off": [Function],
      "on": [Function],
    }
  }
  reactRoot={<div />}
  shadowRoot={
    Object {
      "appendChild": [Function],
    }
  }
  theme={
    Object {
      "dangerColor": "#4b0082",
      "infoColor": "#00ff00",
      "linkColor": "#ff7f00",
      "primaryColor": "#ff0000",
      "splashColor": "#8b00ff",
      "successColor": "#ffff00",
      "themeColor": "#ffffff",
      "tileLayer": "https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
      "warningColor": "#0000ff",
    }
  }
  utils={
    Object {
      "addCleanup": [Function],
      "showMessage": [Function],
    }
  }
>
  <div>
    test
  </div>
</Component>
`;

exports[`withBlock should pass block props to the child element 1`] = `
<Component
  actions={Object {}}
  block={
    Object {
      "theme": Object {
        "dangerColor": "#4b0082",
        "infoColor": "#00ff00",
        "linkColor": "#ff7f00",
        "primaryColor": "#ff0000",
        "splashColor": "#8b00ff",
        "successColor": "#ffff00",
        "themeColor": "#ffffff",
        "tileLayer": "https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
        "warningColor": "#0000ff",
      },
      "type": "test",
      "version": "0.0.0",
    }
  }
  data={Object {}}
  events={
    Object {
      "emit": [Function],
      "off": [Function],
      "on": [Function],
    }
  }
  reactRoot={<div />}
  shadowRoot={
    Object {
      "appendChild": [Function],
    }
  }
  theme={
    Object {
      "dangerColor": "#4b0082",
      "infoColor": "#00ff00",
      "linkColor": "#ff7f00",
      "primaryColor": "#ff0000",
      "splashColor": "#8b00ff",
      "successColor": "#ffff00",
      "themeColor": "#ffffff",
      "tileLayer": "https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
      "warningColor": "#0000ff",
    }
  }
  utils={
    Object {
      "addCleanup": [Function],
      "showMessage": [Function],
    }
  }
>
  <withBlock(Test)>
    <Test
      actions={Object {}}
      block={
        Object {
          "theme": Object {
            "dangerColor": "#4b0082",
            "infoColor": "#00ff00",
            "linkColor": "#ff7f00",
            "primaryColor": "#ff0000",
            "splashColor": "#8b00ff",
            "successColor": "#ffff00",
            "themeColor": "#ffffff",
            "tileLayer": "https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
            "warningColor": "#0000ff",
          },
          "type": "test",
          "version": "0.0.0",
        }
      }
      data={Object {}}
      events={
        Object {
          "emit": [Function],
          "off": [Function],
          "on": [Function],
        }
      }
      reactRoot={<div />}
      shadowRoot={
        Object {
          "appendChild": [Function],
        }
      }
      theme={
        Object {
          "dangerColor": "#4b0082",
          "infoColor": "#00ff00",
          "linkColor": "#ff7f00",
          "primaryColor": "#ff0000",
          "splashColor": "#8b00ff",
          "successColor": "#ffff00",
          "themeColor": "#ffffff",
          "tileLayer": "https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
          "warningColor": "#0000ff",
        }
      }
      utils={
        Object {
          "addCleanup": [Function],
          "showMessage": [Function],
        }
      }
    />
  </withBlock(Test)>
</Component>
`;
